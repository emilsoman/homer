#!/usr/bin/env ruby

require 'thor'
require 'homer'

class HomerRunner < Thor

  default_task :help

=begin
  desc "wipe", "Removes ~/.homer folder. WARNING : THIS IS DANGEROUS"
  def wipe
    Homer.wipe
  rescue Exception => e
    puts "Error: #{e.message}"
  end
=end

  desc "init", "Initializes homer. You need to do this to configure homer"
  def init
    Homer.init
  rescue Exception => e
    say "Error: <%= color('#{e.message}', :red) %>"
  end

  desc "list", "Lists your tracked dotfiles"
  def list
    Homer.list
  rescue Exception => e
    say "Error: <%= color('#{e.message}', :red) %>"
  end

  desc "add NAME HOME_RELATIVE_PATH", "Start tracking a file."\
        "eg: NAME:vimrc (This is just a nickname), HOME_RELATIVE_PATH:~/.vimrc "\
        "to track ~/.vimrc"
  def add(file, home_relative_path)
    Homer.add_dotfile(file, home_relative_path)
  rescue Exception => e
    say "Error: <%= color('#{e.message}', :red) %>"
  end


  desc "sync", "Sync the dotfiles of current user with GitHub"
  def push
    Homer.sync
  rescue Exception => e
    say "Error: <%= color('#{e.message}', :red) %>"
  end

  desc "hi GITHUB_USERNAME", "Fetches 'dotfiles' repo of Github user"
  option :repo, aliases: "-r", desc: "Specify a Github repository name to fetch"
  def hi(github_login)
    #repo = options[:repo] || 'dotfiles'
    #Homer.hi(github_login)
  rescue Exception => e
    say "Error: <%= color('#{e.message}', :red) %>"
  end

=begin
  desc "bye", "Self destructs leaving no trace behind"
  def bye
    Homer.bye
  rescue Exception => e
    puts "Error: #{e.message}"
  end

  desc "restore", "Move back original files and remove symlinks"
  def restore
    puts "This should move back the original dotfiles and remove all symlinks"
  rescue Exception => e
    puts "Error: #{e.message}"
  end
=end

end

HomerRunner.start
